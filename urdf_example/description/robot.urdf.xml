<!-- ros2 launch ros2_control_demo_bringup rrbot_system_position_only_gazebo.launch.py -->
<?xml version="1.0" ?>
<robot name="robot">
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="orange">
    <color rgba="1 0.3 0.1 1"/>
  </material>
  <material name="blue">
    <color rgba="0.2 0.2 1 1"/>
  </material>

  <link name="world"/>

  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <geometry>
        <box size = "1 1 0.05"/>
      </geometry>
      <material name="green">
        <color rgba="0.2 1 0.2 1"/>
      </material>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <mass value="12"/>
      <inertia ixx="2.26" ixy="0.0" ixz="0.0" iyy="6.26" iyz="0.0" izz="8.5"/>
    </inertial>
  </link>

  <link name="Link_0">
    <visual>
      <origin rpy = "0 0 0" xyz = "0 0 0.5"/>
      <geometry>
        <box size = "0.05 0.05 1"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <inertial>
      <origin rpy = "0 0 0" xyz = "0 0 0.5"/>
      <mass value="0.5"/>
      <inertia ixx="0.003541666666666666" ixy="0.0" ixz="0.0" iyy="0.011354166666666667" iyz="0.0" izz="0.013020833333333332"/>
    </inertial>
  </link>

  <link name="Link_1">
    <visual>
      <origin rpy = "0 0 0" xyz = "0 0 0.5"/>
      <geometry>
        <box size = "0.05 0.05 1"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <inertial>
      <origin rpy = "0 0 0" xyz = "0 0 0.5"/>
      <mass value="1.0"/>
      <inertia ixx="0.08583333333333333" ixy="0.0" ixz="0.0" iyy="0.08583333333333333" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>

    <link name="Link_2">
    <visual>
      <origin rpy = "0 0 0" xyz = "0 0 0.5"/>
      <geometry>
        <box size = "0.05 0.05 1"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <inertial>
      <origin rpy = "0 0 0" xyz = "0 0 0.5"/>
      <mass value="1.0"/>
      <inertia ixx="0.08583333333333333" ixy="0.0" ixz="0.0" iyy="0.08583333333333333" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>

  
  <gazebo reference="base_link">
    <material>Gazebo/Green</material>
  </gazebo>
  <gazebo reference="Link_0">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="Link_1">
    <material>Gazebo/Orange</material>
  </gazebo>
  <gazebo reference="Link_2">
    <material>Gazebo/Blue</material>
  </gazebo>

 <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="world"/>
    <child link="base_link"/>
  </joint>

  <joint name="Joint_0" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.05"/>
    <parent link="base_link"/>
    <child link="Link_0"/>
  </joint>

  <joint name="Joint_1" type="revolute">
    <origin rpy="0 0 0" xyz="0.05 0 0.95"/>
    <parent link="Link_0"/>
    <child link="Link_1"/>
    <axis xyz="1 0 0" />
    <limit upper = "3.14" lower = "-3.14" effort = "10" velocity = "10"/>
    <dynamics damping="10.0" friction="10.0"/>
  </joint>

  <joint name="Joint_2" type="revolute">
    <origin xyz = "0.05 0 0.95"/>
    <parent link="Link_1"/>
    <child link="Link_2"/>
    <axis xyz="1 0 0" />
    <limit upper = "3.14" lower = "-3.14" effort = "10" velocity = "10"/>
    <dynamics damping="10.0" friction="10.0"/>
  </joint>

 <ros2_control name="GazeboSystem" type="system">
      <hardware>
          <plugin>gazebo_ros2_control/GazeboSystem</plugin>
      </hardware>
      <joint name="Joint_1">
          <command_interface name="position">
              <param name="min">-10</param>
              <param name="max">10</param>
          </command_interface>
          <state_interface name="velocity"/>
          <state_interface name="position"/>
      </joint>

      <joint name="Joint_2">
          <command_interface name="position">
              <param name="min">-10</param>
              <param name="max">10</param>
          </command_interface>
          <state_interface name="velocity"/>
          <state_interface name="position"/>
      </joint>
  </ros2_control>

  <gazebo>
    <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
      <parameters>$(find urdf_example)/config/my_controllers.yaml</parameters>
    </plugin>
  </gazebo> 



</robot>

  <!--


  <gazebo>
    <plugin filename="libgazebo_ros_joint_state_publisher.so" name="gazebo_ros_joint_state_publisher">
      <update_rate>20</update_rate>
      <joint_name>Joint_1</joint_name>
      <joint_name>Joint_2</joint_name>
    </plugin>
  </gazebo> -->
  <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
  <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
  <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id: world}, joint_names: [Joint_1, Joint_0], points: [  {positions: {0.8,0.6}} ]}' -->
  <!-- <gazebo>
    <plugin filename="libgazebo_ros_joint_pose_trajectory.so" name="gazebo_ros_joint_pose_trajectory">
      <update_rate>20</update_rate>
      <joint_name>Joint_1</joint_name>
      <joint_name>Joint_2</joint_name>
    </plugin>
  </gazebo> -->

  <!-- The next section shows an example of adding a sensor, in this case a depth camera. -->
  <!-- Due to a quirk of how cameras work, an extra joint/link is required to create an
            "optical frame" for the sensor. That isn't the focus for this tutorial, but you can
            look at https://www.ros.org/reps/rep-0103.html#suffix-frames for slightly more information. -->
  <!-- First, create the link and joint for the optical frame -->

  <!-- Add a gazebo tag for the ORIGINAL camera_link (but in the plugin we reference the optical frame so that ROS can orient things correctly) -->
  <!-- Within the gazebo tag we have the sensor tag, and inside that there is (among other things) the camera tag with the camera parameters, 
            and the plugin tag with some extra parameters the plugin needs. -->
  <!-- Note that although visualise is set to true, it won't actually visualise the depth camera in gazebo. To see the preview, 
            try swapping "depth" to "camera"-->
  <!-- <gazebo reference="camera_link">
    <sensor name="my_camera" type="depth">
      <update_rate>20</update_rate>
      <visualize>true</visualize>
      <camera name="cam">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8B8G8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <frame_name>camera_link_optical</frame_name>
        <min_depth>0.1</min_depth>
        <max_depth>500</max_depth>
      </plugin>
    </sensor>
  </gazebo> -->

 <!-- camera_joint describes where the camera is relative to the arm -->
  <!-- - Even though the camera isn't moving relative to the arm, it will probably be helpful to have its own link/frame rather than just adding more visuals to the arm -->
  <!-- - For this example, the camera_link origin will be at the centre of the camera's "sensor" -->
  
  <!-- camera_link describes the camera at the end of the arm -->
  <!-- - It has multiple visual elements, which ultimately get combined together -->
  <!-- - Even if we specify different materials, RViz will just colour them all the same as the first -->
  <!-- - Although we could also specify multiple collision geometries, instead we just use a single box that encompasses the whole camera -->
  
  <!-- This file demonstrates the use of some <gazebo> tags -->
  <!-- To include it add the following line -->
  <!-- <xacro:include filename="example_gazebo.xacro" /> -->
  <!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz uses). -->
  <!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
  <!--  -->
  <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->
  <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). -->

              <!-- Joint_0 describes the rotation of the arm and is centred around the top corner of the slider box. -->
  <!-- - The axis of rotation is -1 in Y, so that positive is "up" -->
  <!-- - The upper limit uses xacro's mathematical features -->
  
  <!-- Link_1 describes the arm -->
  <!-- - We use the "property" feature to define the arm length and radius and use them multiple times -->
  <!-- - The visual/collision origin is set to halfway along the length (similar to the box), but also with a rotation (again using the mathematical features). -->
  <!--   This is because the cylinder extends along the Z axis by default, but we want it to be along the X axis (when the joint is at 0) -->


  <!-- Joint_1 lets Link_0 move back and forth along the top of the base in one dimension.  -->
  <!-- - Origin is set to one of the top edges of the base_link box, so that our link skims across the top  -->
  <!-- - It moves along the X axis -->
  <!-- - We need to specify limits for the motion -->
  <!-- <joint name="Joint_1" type="prismatic">
    <origin rpy="0 0 0" xyz="-1.25 0 0.1"/>
    <parent link="base_link"/>
    <child link="Link_0"/>
    <axis xyz="1 0 0"/>
    <limit effort="100" lower="0" upper="2" velocity="100"/>
  </joint> -->
  
  <!-- Link_0 is the box skimming across the top of the base. Its parameters are similar to the base_link, however: -->
  <!-- - Instead of explicitly describing a colour, it uses the named material "blue". It knows about "blue" that material was included in example_include.xacro. -->
  <!-- - Instead of explicitly describing the inertia, we use a macro that was defined in the example_include.xacro -->
 